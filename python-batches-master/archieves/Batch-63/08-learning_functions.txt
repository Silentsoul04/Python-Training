Function - block of code.
function available in every other language.

# defination of the function.
# function have optional functional parameters.

In [57]: def my_func():
   ....:     print "hello world"
   ....:     

# what is a function object.

In [58]: print type(my_func)
<type 'function'>

In [59]: print my_func
<function my_func at 0x7f29fe63cde8>

In [64]: my_func
Out[64]: <function __main__.my_func>


In [60]: # call the function
# every function has a return value.
# if you dont provide a return value, you get None.

In [61]: print my_func()
hello world
None

In [62]: print my_func()
hello world
None

In [63]: print my_func()
hello world
None

In [64]:

# function with a return value
# return is not a print statement it marks the end of the function.
# Return values can be used in our main program.
# can i have more than one return value ? yes - if you are using condtions you can have multiple return value.

In [66]: def my_func():
   ....:     return "hello world"
   ....: 

In [67]: print my_func()
hello world

In [68]: print my_func()
hello world

In [70]: def my_func():
   ....:     return "hello world"
   ....:     print "my second line"
   ....:     print "my third line"
   ....:     print "my fourth line"
   ....: 

In [71]: print my_func()
hello world

In [72]: 

##
# namespaces or global and local variables.
# Variables defined inside a function are available only during the run time of the function.
# locals() - inbuild function to show namespace/variable inside a function.
##

In [73]: def my_new():
   ....:     xy = 100
   ....:     return xy
   ....: 

In [74]: print my_new()
100

In [75]: print xy
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-75-235c217e1277> in <module>()
----> 1 print xy

NameError: name 'xy' is not defined

# case 2
# the life time of a variable is only during the runtime of function.
# 

In [76]: def my_new():
   ....:     xy = 100
   ....:     print locals()
   ....:     return xy
   ....: 

In [77]: print my_new()
{'xy': 100}
100

In [78]: print xy
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-78-235c217e1277> in <module>()
----> 1 print xy

NameError: name 'xy' is not defined

In [1]: def my_new():
    xy = 100
    print locals()
    return xy
   ...: 

In [2]: globals()
Out[2]: 
{'In': ['',
  u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
  u'globals()'],
 'Out': {},
 '_': '',
 '__': '',
 '___': '',
 '__builtin__': <module '__builtin__' (built-in)>,
 '__builtins__': <module '__builtin__' (built-in)>,
 '__doc__': 'Automatically created module for IPython interactive environment',
 '__name__': '__main__',
 '_dh': [u'/home/khyaathi/Documents/tuxfux-hlp-notes/python-notes/Batch-63'],
 '_i': u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
 '_i1': u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
 '_i2': u'globals()',
 '_ih': ['',
  u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
  u'globals()'],
 '_ii': u'',
 '_iii': u'',
 '_oh': {},
 '_sh': <module 'IPython.core.shadowns' from '/usr/lib/python2.7/dist-packages/IPython/core/shadowns.pyc'>,
 'exit': <IPython.core.autocall.ExitAutocall at 0x7fa78ba15590>,
 'get_ipython': <bound method TerminalInteractiveShell.get_ipython of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x7fa78ccdde90>>,
 'my_new': <function __main__.my_new>,
 'quit': <IPython.core.autocall.ExitAutocall at 0x7fa78ba15590>}

In [3]: print my_new()
{'xy': 100}
100


###
# global variables/namespaces are available to eveyone, that means also to the function.
# When we lookup for a variable - local variable is given precedence over global variable.
#  
####

In [6]: xy = 10


In [8]: globals()
Out[8]: 
{'In': ['',
  u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
  u'globals()',
  u'print my_new()',
  u"get_ipython().magic(u'clear ')",
  u'def my_new():\n    print locals()\n    return xy',
  u'xy = 10',
  u'print globals()',
  u'globals()'],
 'Out': {2: {...}},
 '_': {...},
 '_2': {...},
 '__': '',
 '___': '',
 '__builtin__': <module '__builtin__' (built-in)>,
 '__builtins__': <module '__builtin__' (built-in)>,
 '__doc__': 'Automatically created module for IPython interactive environment',
 '__name__': '__main__',
 '_dh': [u'/home/khyaathi/Documents/tuxfux-hlp-notes/python-notes/Batch-63'],
 '_exit_code': 0,
 '_i': u'print globals()',
 '_i1': u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
 '_i2': u'globals()',
 '_i3': u'print my_new()',
 '_i4': u'clear',
 '_i5': u'def my_new():\n    print locals()\n    return xy',
 '_i6': u'xy = 10',
 '_i7': u'print globals()',
 '_i8': u'globals()',
 '_ih': ['',
  u'def my_new():\n    xy = 100\n    print locals()\n    return xy',
  u'globals()',
  u'print my_new()',
  u"get_ipython().magic(u'clear ')",
  u'def my_new():\n    print locals()\n    return xy',
  u'xy = 10',
  u'print globals()',
  u'globals()'],
 '_ii': u'xy = 10',
 '_iii': u'def my_new():\n    print locals()\n    return xy',
 '_oh': {2: {...}},
 '_sh': <module 'IPython.core.shadowns' from '/usr/lib/python2.7/dist-packages/IPython/core/shadowns.pyc'>,
 'exit': <IPython.core.autocall.ExitAutocall at 0x7fa78ba15590>,
 'get_ipython': <bound method TerminalInteractiveShell.get_ipython of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x7fa78ccdde90>>,
 'my_new': <function __main__.my_new>,
 'quit': <IPython.core.autocall.ExitAutocall at 0x7fa78ba15590>,
 'xy': 10}

In [9]: def my_new():
    print locals()
    return xy
   ...: 

In [10]: print my_new()
{}
10

In [11]: print xy
10

###
# so when you have local variables defined in you function, they get higher presedence than local variables.
#
####



In [13]: xy = 10

In [14]: def my_new():
   ....:     xy = 2
   ....:     return xy
   ....: 

In [15]: print my_new()
2

In [16]: print xy
10

# global keyword

## using a global variable across multiple functions.

In [18]: balance = 0

In [19]: def my_deposit():
   ....:     balance = balance + 3000
   ....:     return balance
   ....: 

In [20]: print my_deposit()
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
<ipython-input-20-0b47bf81b90e> in <module>()
----> 1 print my_deposit()

<ipython-input-19-a795ebb46994> in my_deposit()
      1 def my_deposit():
----> 2     balance = balance + 3000
      3     return balance
      4 

UnboundLocalError: local variable 'balance' referenced before assignment

In [21]: def my_deposit():
   ....:     balance = 0
   ....:     balance = balance + 3000
   ....:     return balance
   ....: 

In [22]: print my_deposit()
3000

In [23]: print balance
0

In [24]: def my_withdraw():
   ....:     balance = 0
   ....:     balance = balance - 1000
   ....:     return balance
   ....: 

In [25]: print my_withdraw()
-1000

# global key word

In [34]: balance = 0

In [35]: def my_withdraw():
    global balance
    print locals()
    balance = balance - 1000
    return balance
   ....: 

In [36]: def my_deposit():
    global balance
    print locals()
    balance = balance + 3000
    return balance
   ....: 

In [37]: print balance
0

In [38]: print my_deposit()
{}
3000

In [39]: print balance
3000

In [40]: print my_withdraw()
{}
2000

In [41]: print balance
2000

# passing parameters to your function.
* positional function arguments
* keyword based function arguments
+ *,**,*args,**kwargs

# positional arguments

In [103]: def my_add(a,b):
   .....:     return a + b
   .....: 

In [104]: print my_add("linux"," rocks")
linux rocks

In [105]: print my_add(" rocks","linux")
 rockslinux

In [106]: def my_add(a,b):
   .....:     print locals()
   .....:     return a + b
   .....: 

In [107]: print my_add("linux"," rocks")
{'a': 'linux', 'b': ' rocks'}
linux rocks

In [108]: print my_add(" rocks","linux")
{'a': ' rocks', 'b': 'linux'}
 rockslinux

In [109]: 

# Keybased arguments

In [109]: # key based arguments

In [110]: print my_add(a="linux",b=" rocks")
{'a': 'linux', 'b': ' rocks'}
linux rocks

In [111]: print my_add(b=" rocks",a="linux")
{'a': 'linux', 'b': ' rocks'}
linux rocks

In [113]: # default

In [114]: def my_multi(num,default=10):
   .....:     for value in range(1,num+1):
   .....:         print "{} * {} = {}".format(num,value,num*value)
   .....:         

In [115]: my_multi(2)
2 * 1 = 2
2 * 2 = 4

In [116]: def my_multi(num,default=10):
    for value in range(1,default+1):
        print "{} * {} = {}".format(num,value,num*value)
   .....:         

In [117]: my_multi(2)
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
2 * 4 = 8
2 * 5 = 10
2 * 6 = 12
2 * 7 = 14
2 * 8 = 16
2 * 9 = 18
2 * 10 = 20

In [118]: my_multi(2,5)
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
2 * 4 = 8
2 * 5 = 10

# http://cache.filehippo.com/img/ex/1125__putty1.png

def putty(ip,port="22"):
  pass

# putty(ip) # port 22
# putty(ip,port=23) # port 23

In [120]: # *

In [121]: def my_add(a,b):
    print locals()
    return a + b
   .....: 

In [122]: my_values = [10,20]

In [123]: print my_values,type(my_values)
[10, 20] <type 'list'>

In [124]: print my_add(my_values)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-124-3d1b135de5ce> in <module>()
----> 1 print my_add(my_values)

TypeError: my_add() takes exactly 2 arguments (1 given)

In [125]: print my_add(*my_values)
{'a': 10, 'b': 20}
30

In [126]: my_values = [10,20,30]

In [127]: print my_add(*my_values)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-127-30e812bcb6cb> in <module>()
----> 1 print my_add(*my_values)

TypeError: my_add() takes exactly 2 arguments (3 given)

In [128]: my_values = [10]

In [129]: print my_add(*my_values)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-129-30e812bcb6cb> in <module>()
----> 1 print my_add(*my_values)

TypeError: my_add() takes exactly 2 arguments (1 given)

In [131]: # **

In [132]: my_values = {'a':10,'b':20}

In [133]: def my_add(a,b):
    print locals()
    return a + b
   .....: 

In [134]: print my_add(**my_values)
{'a': 10, 'b': 20}
30

In [135]: my_values = {'a':10,'c':20}

In [136]: print my_add(**my_values)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-136-48ebd6bff0b3> in <module>()
----> 1 print my_add(**my_values)

TypeError: my_add() got an unexpected keyword argument 'c'

In [137]: 

In [138]: # *args

In [139]: # ex: max

In [140]: print max(3,5)
5

In [141]: print max(3,5,9,10,22,44,55,66)
66

In [142]: print max(-2,-4,-1,-5)
-1

In [143]: def gmax(*args):
   .....:     return args,type(args)
   .....: 

In [144]: print gmax(3,5)
((3, 5), <type 'tuple'>)

In [145]: def gmax(*args):
    return args
   .....: 

In [146]: print gmax(3,5)
(3, 5)

In [147]: print gmax(-2,-4,-1,-5)
(-2, -4, -1, -5)

In [148]: def gmax(*args):
   .....:     big = -1
   .....:     for value in args:
   .....:         if value > big:
   .....:             big = value
   .....:     return big
   .....: 

In [149]: pring gmax(3,5)
  File "<ipython-input-149-1a505f119b78>", line 1
    pring gmax(3,5)
             ^
SyntaxError: invalid syntax


In [150]: print gmax(3,5)
5

In [151]: print gmax(3,5,9,10,22,44,55,66)
66

In [152]: print gmax(-2,-4,-1,-5)
-1

In [154]: # **kwargs

In [155]: def callme(**kwargs):
   .....:     return kwargs
   .....: 

In [156]: print callme(name="kumar",phone=9898989898)
{'phone': 9898989898, 'name': 'kumar'}

In [157]: print callme(name="kumar",add="ameerpet")
{'add': 'ameerpet', 'name': 'kumar'}

In [158]: print callme(name="kumar",add="ameerpet",maiden="vijaya")
{'add': 'ameerpet', 'name': 'kumar', 'maiden': 'vijaya'}

In [159]: def callme(**kwargs):
   .....:     if 'name' in kwargs:
   .....:         print "my name is {}
   .....: "
KeyboardInterrupt

In [159]: def callme(**kwargs):
    if 'name' in kwargs:
        print "my name is {}".format(kwargs['name'])
   .....:         if 'phone' in kwargs:
   .....:             print "my phone number is {}".format(kwargs['phone'])
   .....:         if 'add' in kwargs:
   .....:             print "my address is {}".format(kwargs['add'])
   .....:         if 'maiden' in kwargs:
   .....:             print "my mother name is {}".format(kwargs['maiden'])
   .....:             

In [160]: print callme(name="kumar",phone=9898989898)
my name is kumar
my phone number is 9898989898
None

In [161]: print callme(name="kumar",add="ameerpet",maiden="vijaya")
my name is kumar
my address is ameerpet
my mother name is vijaya
None

In [162]: print callme(name="kumar",add="ameerpet")
my name is kumar
my address is ameerpet
None

In [164]: # function within a function

In [165]: def my_outer():
   .....:     x = 1
   .....:     def inner():
   .....:         return x
   .....:     return inner()
   .....: 

In [166]: print my_outer() #1
1

In [167]: print inner() # error,
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-167-4f83e0c3d670> in <module>()
----> 1 print inner() # error,

NameError: name 'inner' is not defined

In [168]: def my_outer():
    x = 1
    def inner():
        return x
    return inner()
   .....: 

In [169]: def my_outer():
   .....:     x = 1
   .....:     def inner():
   .....:         return x
   .....:     print locals()
   .....:     return inner()
   .....: 

In [170]: print my_outer()
{'x': 1, 'inner': <function inner at 0x7f7c611952a8>}
1

In [171]: globals()

'my_outer': <function __main__.my_outer>,
 'my_sentence': 'today is tuesday',
 'my_string': 'python',
 'my_values': {'a': 10, 'c': 20},
 'num': '1,2,3,4,5,6,7,8,9,10',
 'quit': <IPython.core.autocall.ExitAutocall at 0x7f7c5ff945d0>,
 'sys': <module 'sys' (built-in)>,
 'value': 'tuesday'}

In [173]: # function closures

In [174]: def my_upper():
   .....:     x = 1
   .....:     def inner():
   .....:         return x
   .....:     return inner
   .....: 

In [175]: def foo():
   .....:     pass
   .....: 

In [176]: foo
Out[176]: <function __main__.foo>

In [177]: print foo
<function foo at 0x7f7c611951b8>

In [178]: new = my_upper()

In [179]: print new
<function inner at 0x7f7c61195140>

In [180]: print new()
1

In [181]: print x
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-181-2d264e11d975> in <module>()
----> 1 print x

NameError: name 'x' is not defined

In [182]: # the variables available to the function during the defination of the function also available when i return the address of the function.

In [183]: # decorators







