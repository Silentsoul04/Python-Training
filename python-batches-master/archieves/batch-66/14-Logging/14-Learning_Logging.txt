irctc 

9:30am -> website is down.
10:00am
11:00am

Logging - event driven capturing of errors is called logging.

log4j - logging module -> perl/java.

References:
https://docs.python.org/2/library/logging.html
https://docs.python.org/2/howto/logging.html

Functions  for logging:

- debug(),info(),warning(),error(),critical()

- print -> print is for printing on the screen/console.
- debug() -> granular representation of events from the start to the event generation.
- info() -> for every event we get a information.
- warning() -> for generating the warning messages. ( my disk is gone bad. It wont stop the application.)
- error() -> we have a issue with our application. ( not the whole application but part of application is down.)
- critcal() -> our application is badly affected. (our whole application may be down.)

# for every function we have a level.

DEBUG,INFO,WARNING,ERROR,CRITICAL

In [1]: import logging as l

In [2]: l.
l.BASIC_FORMAT        l.Handler             l.StreamHandler       l.critical            l.info                l.shutdown
l.BufferingFormatter  l.INFO                l.WARN                l.currentframe        l.log                 l.sys
l.CRITICAL            l.LogRecord           l.WARNING             l.debug               l.logMultiprocessing  l.thread
l.DEBUG               l.Logger              l.addLevelName        l.disable             l.logProcesses        l.threading
l.ERROR               l.LoggerAdapter       l.atexit              l.error               l.logThreads          l.time
l.FATAL               l.Manager             l.basicConfig         l.exception           l.makeLogRecord       l.traceback
l.FileHandler         l.NOTSET              l.cStringIO           l.fatal               l.os                  l.warn
l.Filter              l.NullHandler         l.captureWarnings     l.getLevelName        l.raiseExceptions     l.warning
l.Filterer            l.PlaceHolder         l.codecs              l.getLogger           l.root                l.warnings
l.Formatter           l.RootLogger          l.collections         l.getLoggerClass      l.setLoggerClass      l.weakref


khyaathi@khyaathi-Technologies:~/Documents/tuxfux-hlp-notes/python-notes/batch-66/14-Logging$ tail /var/log/syslog
Nov 17 18:51:10 khyaathi-Technologies sublime_text[4806]: Source ID 5198548 was not found when attempting to remove it
Nov 17 18:51:13 khyaathi-Technologies sublime_text[4806]: Source ID 5200066 was not found when attempting to remove it
Nov 17 18:51:16 khyaathi-Technologies sublime_text[4806]: Source ID 5201767 was not found when attempting to remove it
Nov 17 18:51:31 khyaathi-Technologies sublime_text[4806]: Source ID 5209334 was not found when attempting to remove it
Nov 17 18:51:45 khyaathi-Technologies sublime_text[4806]: Source ID 5217191 was not found when attempting to remove it
Nov 17 18:51:50 khyaathi-Technologies sublime_text[4806]: Source ID 5219698 was not found when attempting to remove it
Nov 17 18:52:14 khyaathi-Technologies sublime_text[4806]: Source ID 5232941 was not found when attempting to remove it
Nov 17 18:52:19 khyaathi-Technologies sublime_text[4806]: Source ID 5235156 was not found when attempting to remove it
Nov 17 18:52:26 khyaathi-Technologies gnome-terminal-[4671]: Allocating size to GtkBox 0x55855e898f90 without calling gtk_widget_get_preferred_width/height(). How does the code know the size to allocate?
Nov 17 18:52:50 khyaathi-Technologies gnome-terminal-[4671]: Allocating size to GtkBox 0x55855ea257b0 without calling gtk_widget_get_preferred_width/height(). How does the code know the size to allocate?
khyaathi@khyaathi-Technologies:~/Documents/tuxfux-hlp-notes/python-notes/batch-66/14-Logging$


##
# FileHandler and StreamHandler.
###

In [1]: import logging as l

In [2]: l.
      l.addLevelName       l.error              l.log                l.RootLogger         
      l.atexit             l.ERROR              l.Logger             l.setLoggerClass     
      l.BASIC_FORMAT       l.exception          l.LoggerAdapter      l.shutdown           
      l.basicConfig        l.FATAL              l.logMultiprocessing l.StreamHandler      
      l.BufferingFormatter l.fatal              l.logProcesses       l.sys                
      l.captureWarnings    l.FileHandler        l.LogRecord          l.thread             
      l.codecs             l.Filter             l.logThreads         l.threading          
      l.collections        l.Filterer           l.makeLogRecord      l.time               
      l.CRITICAL           l.Formatter          l.Manager            l.traceback          
      l.critical           l.getLevelName       l.NOTSET             l.warn               
      l.cStringIO          l.getLogger          l.NullHandler        l.WARN               
      l.currentframe       l.getLoggerClass     l.os                 l.WARNING            
      l.DEBUG              l.Handler            l.PlaceHolder        l.warning            
      l.debug              l.info               l.raiseExceptions    l.warnings           
      l.disable            l.INFO               l.root               l.weakref 


In [5]: import logging.handlers as lh

In [6]: lh.
   lh.BaseRotatingHandler       lh.HTTPHandler               lh.ST_DEV                    
   lh.BufferingHandler          lh.logging                   lh.ST_INO                    
   lh.codecs                    lh.MemoryHandler             lh.ST_MTIME                  
   lh.cPickle                   lh.NTEventLogHandler         lh.struct                    
   lh.DatagramHandler           lh.os                        lh.SYSLOG_TCP_PORT           
   lh.DEFAULT_HTTP_LOGGING_PORT lh.re                        lh.SYSLOG_UDP_PORT           
   lh.DEFAULT_SOAP_LOGGING_PORT lh.RotatingFileHandler       lh.SysLogHandler             
   lh.DEFAULT_TCP_LOGGING_PORT  lh.SMTPHandler               lh.time                      
   lh.DEFAULT_UDP_LOGGING_PORT  lh.socket                    lh.TimedRotatingFileHandler  
   lh.errno                     lh.SocketHandler             lh.WatchedFileHandler        

           





