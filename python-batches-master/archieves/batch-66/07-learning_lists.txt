lists - linear representation of data.
list can hold both homogeneous/hetrogensou collection of data.
Arrays - numpy ( lists)

In [1]: my_fruits = ['apple','banana','cherry','dates']

In [2]: print my_fruits,type(my_fruits)
['apple', 'banana', 'cherry', 'dates'] <type 'list'>

In [3]: # lists are indexed

In [4]: # my_fruits = ['apple','banana','cherry','dates']
   ...: 

In [5]: #               0         1        2        3

In [6]: #              -4        -3        -2       -1

In [7]: my_fruits[0]
Out[7]: 'apple'

In [8]: my_fruits[-4]
Out[8]: 'apple'

In [9]: # slicing

In [10]: my_fruits[0:2]
Out[10]: ['apple', 'banana']

In [11]: # modify the elements of a list

In [12]: my_fruits[0] = 'Apple'

In [13]: print my_fruits
['Apple', 'banana', 'cherry', 'dates']

In [14]: my_string="python"

In [15]: my_string[0]
Out[15]: 'p'

In [16]: my_string[0]="P"
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-16-2de60217cbe7> in <module>()
----> 1 my_string[0]="P"

TypeError: 'str' object does not support item assignment

In [17]: # in

In [18]: my_fruits
Out[18]: ['Apple', 'banana', 'cherry', 'dates']

In [19]: 'cherry' in my_fruits
Out[19]: True

In [20]: 'apple' in my_fruits
Out[20]: False

In [22]: my_empty = []

In [23]: print my_empty
[]

In [24]: my_empty = list()

In [25]: print my_empty
[]

In [26]: 

In [27]: # function

In [28]: my_fruits 
Out[28]: ['Apple', 'banana', 'cherry', 'dates']

In [29]: # append

In [30]: my_fruits.append?
Docstring: L.append(object) -- append object to end
Type:      builtin_function_or_method

In [31]: my_fruits.append('fig')

In [32]: print my_fruits
['Apple', 'banana', 'cherry', 'dates', 'fig']

In [33]: # extend

In [34]: my_fruits.extend?
Docstring: L.extend(iterable) -- extend list by appending elements from the iterable
Type:      builtin_function_or_method

In [35]: my_fruits.extend(['gauva','jackfruit','kiwi'])

In [36]: my_fruits
Out[36]: ['Apple', 'banana', 'cherry', 'dates', 'fig', 'gauva', 'jackfruit', 'kiwi']

In [37]: for value in my_fruits:
    ...:     print value
    ...:     
Apple
banana
cherry
dates
fig
gauva
jackfruit
kiwi

In [38]: # insert

In [39]: my_fruits.insert?
Docstring: L.insert(index, object) -- insert object before index
Type:      builtin_function_or_method

In [40]: my_fruits.insert(0,'avacado')

In [41]: print my_fruits
['avacado', 'Apple', 'banana', 'cherry', 'dates', 'fig', 'gauva', 'jackfruit', 'kiwi']

In [42]: my_fruits.insert(6,'grapes')

In [43]: print my_fruits
['avacado', 'Apple', 'banana', 'cherry', 'dates', 'fig', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [44]: # index

In [45]: my_fruits.index?
Docstring:
L.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
Type:      builtin_function_or_method

In [46]: my_fruits.index('jackfruit')
Out[46]: 8

In [47]: print len(my_fruits)
10

In [48]: my_string
Out[48]: 'python'

In [49]: print len(my_string)
6

In [50]: my_fruits.insert(3,'grapes')

In [51]: print my_fruits
['avacado', 'Apple', 'banana', 'grapes', 'cherry', 'dates', 'fig', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [52]: # count

In [53]: my_fruits.count?
Docstring: L.count(value) -> integer -- return number of occurrences of value
Type:      builtin_function_or_method

In [54]: print my_fruits.count('grapes')
2

In [55]: print my_fruits.count('apple')
0

In [56]: print my_fruits.index('grapes')
3

In [57]: print my_fruits.index('grapes',4)
7

In [59]: #  pop

In [60]: my_fruits.pop?
Docstring:
L.pop([index]) -> item -- remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
Type:      builtin_function_or_method

In [61]: my_fruits
Out[61]: 
['avacado',
 'Apple',
 'banana',
 'grapes',
 'cherry',
 'dates',
 'fig',
 'grapes',
 'gauva',
 'jackfruit',
 'kiwi']

In [62]: my_fruits.index('fig')
Out[62]: 6

In [63]: my_fruits.pop(my_fruits.index('fig'))
Out[63]: 'fig'

In [64]: print my_fruits
['avacado', 'Apple', 'banana', 'grapes', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [65]: my_fruits.pop(10)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-65-293403469973> in <module>()
----> 1 my_fruits.pop(10)

IndexError: pop index out of range

In [67]: # remove

In [68]: my_fruits.remove?
Docstring:
L.remove(value) -- remove first occurrence of value.
Raises ValueError if the value is not present.
Type:      builtin_function_or_method

In [69]: my_fruits
Out[69]: 
['avacado',
 'Apple',
 'banana',
 'grapes',
 'cherry',
 'dates',
 'grapes',
 'gauva',
 'jackfruit',
 'kiwi']

In [70]: my_fruits.remove('Apple')

In [71]: print my_fruits
['avacado', 'banana', 'grapes', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [72]: my_fruits.remove('Apple')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-72-808718e33a23> in <module>()
----> 1 my_fruits.remove('Apple')

ValueError: list.remove(x): x not in list

In [73]: my_fruits.remove('grapes')

In [74]: print my_fruits
['avacado', 'banana', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [75]: 

In [76]: print my_fruits
['avacado', 'banana', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [77]: # reverse

In [78]: my_fruits.reverse?
Docstring: L.reverse() -- reverse *IN PLACE*
Type:      builtin_function_or_method

In [79]: 

In [79]: print my_fruits.reverse()
None

In [80]: print my_fruits
['kiwi', 'jackfruit', 'gauva', 'grapes', 'dates', 'cherry', 'banana', 'avacado']

In [81]: # sort

In [82]: my_fruits.sort?
Docstring:
L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -> -1, 0, 1
Type:      builtin_function_or_method

In [83]: my_fruits.sort()

In [84]: print my_fruits
['avacado', 'banana', 'cherry', 'dates', 'gauva', 'grapes', 'jackfruit', 'kiwi']

In [85]: print my_fruits(reverse=True)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-85-bc3a3f405d86> in <module>()
----> 1 print my_fruits(reverse=True)

TypeError: 'list' object is not callable

In [86]: my_fruits.sort(reverse=True)

In [87]: print my_fruits
['kiwi', 'jackfruit', 'grapes', 'gauva', 'dates', 'cherry', 'banana', 'avacado']

In [88]: 


# task1:

input:
my_fruits = ['apple','apple','banana','banana','cherry']
output:
my_fruits = ['apple','banana','cherry']
my_dupli = ['apple','banana']

# task2:

input:
days = ['yesterday','today','tomorrow','dayafter']
output:
a) task1:
output:
yesterday  9
today      5
tomorrow   8
dayafter   8

b) task2:
output:
Yesterday
TOday
TOMorrow
DAYAfter


In [91]: # A string to a list

In [92]: my_string="python"

In [93]: Lmy_string=list(my_string)

In [94]: print Lmy_string
['p', 'y', 't', 'h', 'o', 'n']

In [95]: Lmy_string[0]
Out[95]: 'p'

In [96]: Lmy_string[0]='T'

In [97]: print Lmy_string
['T', 'y', 't', 'h', 'o', 'n']

In [98]: # list to a string

In [99]: delimiter = ''

In [100]: delimiter.join?
Docstring:
S.join(iterable) -> string

Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
Type:      builtin_function_or_method

In [102]: delimiter.join(Lmy_string)
Out[102]: 'Tython'

In [103]: new_string=delimiter.join(Lmy_string)

In [104]: print my_string
python

In [105]: print new_string
Tython

In [109]: # A string to a list

In [110]: my_sentence = "today is friday"

In [111]: Lmy_sentence = list(my_sentence)

In [112]: print Lmy_sentence
['t', 'o', 'd', 'a', 'y', ' ', 'i', 's', ' ', 'f', 'r', 'i', 'd', 'a', 'y']

In [113]: my_sentence.split?
Docstring:
S.split([sep [,maxsplit]]) -> list of strings

Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are removed
from the result.
Type:      builtin_function_or_method

In [114]: # tuxfux.hlp@gmail.com

In [115]: my_sentence.split()
Out[115]: ['today', 'is', 'friday']

In [116]: Lmy_sentence=my_sentence.split()

In [117]: print Lmy_sentence
['today', 'is', 'friday']

In [118]: Lmy_sentence[-1]="Friday"

In [119]: print Lmy_sentence
['today', 'is', 'Friday']

In [120]: Lmy_sentence[-1]="Wednesday"

In [121]: print Lmy_sentence
['today', 'is', 'Wednesday']

In [122]: # list to a string

In [123]: my_limiter = ' '

In [124]: my_limiter.join?
Docstring:
S.join(iterable) -> string

Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
Type:      builtin_function_or_method

In [125]: my_limiter.join(Lmy_sentence)
Out[125]: 'today is Wednesday'

In [126]: new_sentence=my_limiter.join(Lmy_sentence)

In [127]: print new_sentence
today is Wednesday

# use case

In [132]: my_limiter.join(Lmy_sentence)
Out[132]: 'today is Wednesday'

In [133]: my_limiter
Out[133]: ' '

In [134]: my_limiter=':'

In [135]: my_limiter.join(Lmy_sentence)
Out[135]: 'today:is:Wednesday'

In [136]: #khyaathi:x:1000:1000:KHYAATHI,,,:/home/khyaathi:/bin/bash

In [137]: #useradd khyaathi

In [138]: my_user=['khyaathi','x','1000','1000','KHYAATHI is my home','/home/khyaathi','/bin/bash']

In [139]: print my_user
['khyaathi', 'x', '1000', '1000', 'KHYAATHI is my home', '/home/khyaathi', '/bin/bash']

In [140]: delimiter=':'

In [141]: delimiter.join(my_user)
Out[141]: 'khyaathi:x:1000:1000:KHYAATHI is my home:/home/khyaathi:/bin/bash'

In [142]: 

# aliasing/memory in variables

In [143]: # soft copy and deep copy

In [144]: a = 1

In [145]: id?
Docstring:
id(object) -> integer

Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)
Type:      builtin_function_or_method

In [146]: id(a)
Out[146]: 94821547094360

In [147]: id(1)
Out[147]: 94821547094360

In [148]: b = 1

In [149]: id(b)
Out[149]: 94821547094360

In [150]: # is

In [151]: a is b
Out[151]: True

In [152]: b = 10

In [153]: print a
1

In [154]: print b
10

In [155]: a is b
Out[155]: False

In [156]: id(a)
Out[156]: 94821547094360

In [157]: id(b)
Out[157]: 94821547094144

# soft copy

In [159]: a = [1,2,3]

In [160]: id(a)
Out[160]: 140388330500464

In [161]: b = a

In [162]: id(b)
Out[162]: 140388330500464

In [163]: b is a
Out[163]: True

In [164]: a[1]
Out[164]: 2

In [165]: a[1]="two"

In [166]: print a # [1,"two",3]
[1, 'two', 3]

In [167]: print b # [1,2,3],[1,two,3]
[1, 'two', 3]

# deep copy

In [168]: # os take your whole list as one big block of memory

In [169]: # there is no soft copy in other programming languages

In [170]: a = ["one","two","three"]

In [171]: print a
['one', 'two', 'three']

In [172]: print b # ["one","two","three"],[1,"two",3]
[1, 'two', 3]

In [173]: id(a),id(b)
Out[173]: (140388244044544, 140388330500464)

In [174]: a is b
Out[174]: False

## why?why?why?

In [182]: a = 300

In [183]: b = 300

In [184]: a is b
Out[184]: False

In [185]: id(a)
Out[185]: 94821557040056

In [186]: id(b)
Out[186]: 94821557040128

In [187]: a = 1

In [188]: b = 1

In [189]: a is b
Out[189]: True


# list comprehensions

https://github.com/tuxfux-hlp/Python-examples/blob/master/lists/list_comprehension.txt


In [201]: my_num = []

In [202]: for value in range(1,100):
     ...:     if value*value % 2 == 0 and value* value % 5 == 0:
     ...:         my_num.append(value)
     ...:         

In [203]: print my_num
[10, 20, 30, 40, 50, 60, 70, 80, 90]

In [204]: for value in my_num:
     ...:     if value % 3 == 0:
     ...:         print value
     ...:         
30
60
90

In [205]: my_result = []

In [206]: for value in my_num:
     ...:     if value % 3 == 0:
     ...:         my_result.append(value)
     ...:                 

In [207]: print my_value
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-207-103b9b298af1> in <module>()
----> 1 print my_value

NameError: name 'my_value' is not defined

In [208]: print my_result
[30, 60, 90]


--- list comprehension --- 

In [210]: [ value for value in range(1,100) if value*value % 2 == 0 and value*value % 5 == 0]
Out[210]: [10, 20, 30, 40, 50, 60, 70, 80, 90]

In [211]: # [ output; looping/recursion;conditions]

In [212]: [ value for value in [ value for value in range(1,100) if value*value % 2 == 0 and value*value % 5 == 0] if value
     ...:  % 3 == 0]
Out[212]: [30, 60, 90]

In [213]: 


In [214]: # usecase 2:

In [215]: my_num = raw_input("please enter your number:")
please enter your number:1,2,3,4,5,6,7,8,9,10

In [216]: print my_num
1,2,3,4,5,6,7,8,9,10

In [217]: print my_num,type(my_num)
1,2,3,4,5,6,7,8,9,10 <type 'str'>

In [218]: # output => 2,4,6,8,10

In [219]: my_output=[]

In [220]: for value in my_num.split(','):
     ...:     if int(value) % 2 == 0:
     ...:         my_output.append(value)
     ...:         

In [221]: print my_output
['2', '4', '6', '8', '10']

In [222]: print ','.join(my_output)
2,4,6,8,10

In [223]: # list comprehension

In [224]: [ value for value in my_num.split(',') if int(value) % 2 == 0]
Out[224]: ['2', '4', '6', '8', '10']

In [225]: ','.join([ value for value in my_num.split(',') if int(value) % 2 == 0])
Out[225]: '2,4,6,8,10'

In [226]: 

In [227]: # use-case 3

In [228]: my_string="tomorrow is friday"

In [229]: [ [value.lower(),value.upper(),value.capitalize()]for value in my_string.split()]
Out[229]: 
[['tomorrow', 'TOMORROW', 'Tomorrow'],
 ['is', 'IS', 'Is'],
 ['friday', 'FRIDAY', 'Friday']]

In [230]: 


References:
https://scipy.org/
https://github.com/tuxfux-hlp-notes/seminars


# going over seminar vidoes

wget https://github.com/tuxfux-hlp-notes/seminars/blob/master/pandas%20and%20Numpy/2016-07-16%2009.03%20SEMINAR%20ON%20NAMPY%20AND%20PANDAS%20BY%20TCLOUD%20IT.wmv
https://pandas.pydata.org/pandas-docs/stable/10min.html