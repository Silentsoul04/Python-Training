Other programming languages
# for,foreach,while,do..while,while..do,until
python programming language
# for,while
# for - finite 
# while - infinite

looping - works on sequences

# 3.x
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
(END)


In [1]: my_string="python"

In [2]: for value in my_string:
   ...:     print value
   ...:     
p
y
t
h
o
n

In [3]: for pupil in ('mayuri','sowji','priyanka','ravi','reddy','anand'):
   ...:     print pupil
   ...:     
mayuri
sowji
priyanka
ravi
reddy
anand

In [4]: # u can use a tuple or a list to print out the values as words

In [6]: range?
Docstring:
range(stop) -> list of integers
range(start, stop[, step]) -> list of integers

Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
Type:      builtin_function_or_method

In [7]: range(4)
Out[7]: [0, 1, 2, 3]

In [8]: range(1,11,2)
Out[8]: [1, 3, 5, 7, 9]

In [9]: range(2,11,2)
Out[9]: [2, 4, 6, 8, 10]

In [10]: for value in range(1,11):
    ...:     print value
    ...:     
1
2
3
4
5
6
7
8
9
10

In [12]: iter?
Docstring:
iter(collection) -> iterator
iter(callable, sentinel) -> iterator

Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
Type:      builtin_function_or_method

In [13]: m = iter(range(5))

In [14]: print m,type(m)
<listiterator object at 0x7fccc63a2550> <type 'listiterator'>

In [15]: m.next()
Out[15]: 0

In [16]: m.next()
Out[16]: 1

In [17]: m.next()
Out[17]: 2

In [18]: m.next()
Out[18]: 3

In [19]: m.next()
Out[19]: 4

In [20]: m.next()
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
<ipython-input-20-e97a0f4742ad> in <module>()
----> 1 m.next()

StopIteration: 






n [1]: import sys

In [2]: sys.exit?
Docstring:
exit([status])

Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
Type:      builtin_function_or_method

In [3]: 


root@khyaathipython:~/Documents/git_repos/python-batches/batch-66# ls
big.py    guess_number.py   Learning_conditions.txt  Learning_Looping.txt    market.py      opensource.txt
first.py  Installation.txt  learning_help.txt        learning_variables.txt  myfirst.ipynb  second.py
root@khyaathipython:~/Documents/git_repos/python-batches/batch-66# echo $?
0
root@khyaathipython:~/Documents/git_repos/python-batches/batch-66# ld
ld: no input files
root@khyaathipython:~/Documents/git_repos/python-batches/batch-66# echo $?
1
root@khyaathipython:~/Documents/git_repos/python-batches/batch-66# 

# iternator and generator

In [5]: range?
Docstring:
range(stop) -> list of integers
range(start, stop[, step]) -> list of integers

Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
Type:      builtin_function_or_method

In [6]: xrange?
Docstring:
xrange(stop) -> xrange object
xrange(start, stop[, step]) -> xrange object

Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is 
slightly faster than range() and more memory efficient.
Type:      type

In [7]: range(5)
Out[7]: [0, 1, 2, 3, 4]

In [8]: xrange(5)
Out[8]: xrange(5)

In [9]: for value in xrange(5):
   ...:     print value
   ...:     
0
1
2
3
4

In [10]: # iterator will run out of memory

In [11]: # generator will run out of time.

