# function
A block of code which can be called n number of times.

In [1]: def my_func():
   ...:     print "hello there"
   ...:     

In [2]: print my_func,id(my_func)
<function my_func at 0x7fb5e7659cf8> 140419248004344

In [3]: print my_func,type(my_func)
<function my_func at 0x7fb5e7659cf8> <type 'function'>

In [4]: my_func
Out[4]: <function __main__.my_func>

In [5]: print my_func
<function my_func at 0x7fb5e7659cf8>

In [6]: print my_func()
hello there
None

In [7]: # every function has a return value.

In [8]: # if there is no return value we get none.

In [9]: def my_func():
   ...:     return "hello world"
   ...: 

In [10]: print my_func()
hello world

In [11]: def my_func():
    ...:     return "hello world"
    ...:     print "my first line"
    ...:     print "my second line"
    ...:     print "my third line"
    ...: 

In [12]: print my_func()
hello world

In [13]: # return is not a print statement

In [14]: # return marks the end of your function.

In [15]: # return takes out the control out of function.

In [17]: ## variabels(local/global) and namespaces

In [18]: def my_func():
    ...:     x = 5
    ...:     return x
    ...: 

In [19]: print my_func()
5

In [20]: print x
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-20-0b640320f694> in <module>()
----> 1 print x

NameError: name 'x' is not defined

In [21]: # any variable defined inside a function is restricted to the funciton.

In [22]: # there is no syntax to access the local variables ( ex: x = 5)

In [23]: # during the runtime of the function the variables are getting initialized.

In [24]: def my_func():
    ...:     x = 5
    ...:     print locals()
    ...:     return x
    ...: 

In [25]: print my_func()
{'x': 5}
5

In [26]: # locals() is a function to display our local variables.

In [27]: x = 1

In [28]: def my_func():
    ...:     print locals()
    ...:     return x
    ...: 

In [29]: print my_func()
{}
1

In [30]: # x is a global variable and is associated with global namesspace.

In [31]: # if there is no value in local scope look into global scope.

In [32]: x = 10

In [33]: def my_func():
    ...:     x = 2
    ...:     print locals()
    ...:     return x
    ...: 

In [34]: print my_func()
{'x': 2}
2

In [35]: # a local scope is given a higher priority then global scope.

In [36]: 


In [37]: # globals() 

In [38]: # A global namespace

In [39]: globals()
Out[39]: 
{'In': ['',
  u'def my_func():\n    print "hello there"\n    ',
  u'print my_func,id(my_func)',
--- truncated ---

In [45]: # global

In [46]: balance = 0

In [47]: def my_deposit():
    ...:     balance = balance + 1000
    ...:     return balance
    ...: 
    ...: 

In [48]: def my_withdraw():
    ...:     balance = balance - 200
    ...:     return balance
    ...: 

In [49]: my_deposit()
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
<ipython-input-49-a78f69abe684> in <module>()
----> 1 my_deposit()

<ipython-input-47-170af8eccbd7> in my_deposit()
      1 def my_deposit():
----> 2     balance = balance + 1000
      3     return balance
      4 

UnboundLocalError: local variable 'balance' referenced before assignment

In [50]: # workaround

In [51]: def my_withdraw():
    ...:     balance = 0
    ...:     balance = balance - 200
    ...:     return balance
    ...: 

In [52]: def my_deposit():
    ...:     balance=0
    ...:     balance = balance + 1000
    ...:     return balance
    ...: 
    ...: 

In [53]: my_deposit()
Out[53]: 1000

In [54]: print balance
0

In [55]: my_withdraw()
Out[55]: -200

In [56]: # global hero


In [58]: def my_withdraw():
    ...:     global balance
    ...:     balance = balance - 200
    ...:     return balance
    ...: 
    ...: 

## defining the function
In [59]: def my_deposit():
    ...:     global balance
    ...:     print locals()
    ...:     balance = balance + 1000
    ...:     return balance
    ...: 
    ...: 
    ...: 

## calling the function.
In [60]: my_deposit()
{}
Out[60]: 1000

In [61]: print balance
1000

In [62]: my_withdraw()
Out[62]: 800

In [63]: print balance
800

In [64]: 

In [65]: 

In [65]: # functional parameters

In [66]: def my_func(a,b):
    ...:     return a + b
    ...: 

In [67]: print my_func("linux"," rocks")
linux rocks

In [68]: print my_func(" rocks","linux")
 rockslinux

In [69]: print my_func(" rocks","linux","as python")
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-69-b159056889fc> in <module>()
----> 1 print my_func(" rocks","linux","as python")

TypeError: my_func() takes exactly 2 arguments (3 given)

In [70]: # key based arguments

In [71]: print my_func(b=" rocks",a="linux")
linux rocks

In [72]: # default values

In [93]: # default values

In [94]: def my_multi(num,limit=10):
    ...:     for value in range(1,limit+1):
    ...:         print "{} * {} = {}".format(num,value,num*value)
    ...:         

In [95]: my_multi(2)
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
2 * 4 = 8
2 * 5 = 10
2 * 6 = 12
2 * 7 = 14
2 * 8 = 16
2 * 9 = 18
2 * 10 = 20

In [96]: def my_multi(num,limit=10):
    ...:     for value in range(1,limit+1):
    ...:         print "{0:2d} * {1:2d} = {2:3d}".format(num,value,num*value)
    ...:         
    ...:         

In [97]: my_multi(2)
 2 *  1 =   2
 2 *  2 =   4
 2 *  3 =   6
 2 *  4 =   8
 2 *  5 =  10
 2 *  6 =  12
 2 *  7 =  14
 2 *  8 =  16
 2 *  9 =  18
 2 * 10 =  20

In [98]: my_multi(2,5)
 2 *  1 =   2
 2 *  2 =   4
 2 *  3 =   6
 2 *  4 =   8
 2 *  5 =  10

In [99]: my_multi(2,limit=5)
 2 *  1 =   2
 2 *  2 =   4
 2 *  3 =   6
 2 *  4 =   8
 2 *  5 =  10


In [93]: # default values

In [94]: def my_multi(num,limit=10):
    ...:     for value in range(1,limit+1):
    ...:         print "{} * {} = {}".format(num,value,num*value)
    ...:         

In [95]: my_multi(2)
2 * 1 = 2
2 * 2 = 4
2 * 3 = 6
2 * 4 = 8
2 * 5 = 10
2 * 6 = 12
2 * 7 = 14
2 * 8 = 16
2 * 9 = 18
2 * 10 = 20

In [96]: def my_multi(num,limit=10):
    ...:     for value in range(1,limit+1):
    ...:         print "{0:2d} * {1:2d} = {2:3d}".format(num,value,num*value)
    ...:         
    ...:         

In [97]: my_multi(2)
 2 *  1 =   2
 2 *  2 =   4
 2 *  3 =   6
 2 *  4 =   8
 2 *  5 =  10
 2 *  6 =  12
 2 *  7 =  14
 2 *  8 =  16
 2 *  9 =  18
 2 * 10 =  20

In [98]: my_multi(2,5)
 2 *  1 =   2
 2 *  2 =   4
 2 *  3 =   6
 2 *  4 =   8
 2 *  5 =  10

In [99]: my_multi(2,limit=5)
 2 *  1 =   2
 2 *  2 =   4
 2 *  3 =   6
 2 *  4 =   8
 2 *  5 =  10

In [100]: def putty(hostname,port=22):
     ...:     pass
     ...: 

In [101]: #  putty(google.com)

In [102]: # putty(google.com,port=80)

In [105]: # *

In [106]: def my_add(a,b):
     ...:     return a + b
     ...: 

In [107]: my_value = [11,22]

In [108]: def my_add(my_value)
  File "<ipython-input-108-5ac70d7d6016>", line 1
    def my_add(my_value)
                        ^
SyntaxError: invalid syntax


In [109]: my_add(my_value)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-109-1970b1cc4781> in <module>()
----> 1 my_add(my_value)

TypeError: my_add() takes exactly 2 arguments (1 given)

In [110]: my_add(*my_value)
Out[110]: 33

In [111]: my_value=[11,22,33]

In [112]: my_add(*my_value)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-112-90633cdc0007> in <module>()
----> 1 my_add(*my_value)

TypeError: my_add() takes exactly 2 arguments (3 given)

In [113]: 

## **

In [114]: # **

In [115]: def my_add(a,b):
     ...:     return a + b
     ...: 

In [116]: 

In [116]: my_value = {'a':11,'b':12}

In [117]: my_add(**my_value)
Out[117]: 23

In [118]: for value in [[11,22],[33,44],[55,66]]:
     ...:     print my_add(*value)
     ...:     
33
77
121

In [119]: my_value={'a':11,'c':13}

In [120]: my_add(**my_value)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-120-c08ad1d6bc31> in <module>()
----> 1 my_add(**my_value)

TypeError: my_add() got an unexpected keyword argument 'c'

In [121]: ## task

In [122]: # in python arguments passed to a function , is it passed as value or reference or an object ?

In [124]: # *args

In [125]: max?
Docstring:
max(iterable[, key=func]) -> value
max(a, b, c, ...[, key=func]) -> value

With a single iterable argument, return its largest item.
With two or more arguments, return the largest argument.
Type:      builtin_function_or_method

In [126]: max(11,22)
Out[126]: 22

In [127]: max(11,33,5,32,42,12)
Out[127]: 42

In [128]: ## gmax

In [129]: def gmax(*args):
     ...:     return args
     ...: 

In [130]: print gmax(11,22)
(11, 22)

In [131]: print gmax(11,33,5,32,42,12)
(11, 33, 5, 32, 42, 12)

In [132]: def gmax(*args):
     ...:     big = -1
     ...:     for value in args:
     ...:         if value > big:
     ...:             big = value
     ...:     return big
     ...: 

In [133]: print gmax(11,22)
22

In [134]: print gmax(11,33,5,32,42,12)
42

In [135]: 

In [136]: # **kwargs

In [137]: def callme(**kwargs):
     ...:     return kwargs
     ...: 

In [138]: print callme('name'='kumar','gender'='male')
  File "<ipython-input-138-1500de3eb955>", line 1
    print callme('name'='kumar','gender'='male')
SyntaxError: keyword can't be an expression


In [139]: print callme(name='kumar',gender='male')
{'gender': 'male', 'name': 'kumar'}

In [140]: print callme(name='kumar',maiden='vijaya')
{'name': 'kumar', 'maiden': 'vijaya'}

In [141]: print callme(name='kumar',maiden='vijaya',home='KPHB')
{'home': 'KPHB', 'name': 'kumar', 'maiden': 'vijaya'}

In [142]: def callme(**kwargs):
     ...:     if 'name' in kwargs:
     ...:         print "my name is {}".format(kwargs['name'])
     ...:     if 'gender' in kwargs:
     ...:         print "my gender is {}".format(kwargs['gender'])
     ...:     if 'maiden' in kwargs:
     ...:         print "my maiden name is {}".format(kwargs['maiden'])
     ...:     if 'home' in kwargs:
     ...:         print "my home name is {}".format(kwargs['home'])
     ...:         

In [143]: print callme(name='kumar',maiden='vijaya',home='KPHB')
my name is kumar
my maiden name is vijaya
my home name is KPHB
None

In [144]: print callme(name='kumar',maiden='vijaya')
my name is kumar
my maiden name is vijaya
None

In [145]: print callme(name='kumar',gender='male')
my name is kumar
my gender is male
None

In [147]: # function is a first class object

In [148]: def my_add(a,b):
     ...:     return a + b
     ...: 

In [149]: def my_sub(a,b):
     ...:     return a - b
     ...: 

In [150]: def my_extra(my_func,a,b):
     ...:     return my_func(a,b)
     ...: 

In [151]: print my_extra(my_add,11,12)
23

In [152]: print my_extra(my_sub,11,12)
-1

In [153]: ## try fibonacci series

In [154]: ## try factorial of a number


In [156]: ## function within a function

In [157]: def my_upper():
     ...:     x = 1
     ...:     def my_lower():
     ...:         return x
     ...:     return my_lower()
     ...: 

In [158]: print my_upper() #1,error
1

In [159]: print my_lower() # 1,x,error
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-159-f43a2ce8f756> in <module>()
----> 1 print my_lower() # 1,x,error

NameError: name 'my_lower' is not defined

In [160]: print x
11

In [161]: 

In [162]: ## functions witin a function

In [163]: def upper():
     ...:     x = 1
     ...:     def lower():
     ...:         return x
     ...:     return lower
     ...: 

In [164]: def foo():
     ...:     pass
     ...: 

In [165]: foo
Out[165]: <function __main__.foo>

In [166]: print foo
<function foo at 0x7fb5e7ecc050>

In [167]: inner = upper()

In [168]: print inner
<function lower at 0x7fb5e6c74938>

In [169]: print inner()
1

In [170]: x
Out[170]: 11

In [171]: # when ever i define a function(lower),if i return it(return lower), it also remembers the value available to it 
     ...: durings its defination time.

In [172]: # function closures

In [174]: # map,filter and lambda

In [175]: map?
Docstring:
map(function, sequence[, sequence, ...]) -> list

Return a list of the results of applying the function to the items of
the argument sequence(s).  If more than one sequence is given, the
function is called with an argument list consisting of the corresponding
item of each sequence, substituting None for missing values when not all
sequences have the same length.  If the function is None, return a list of
the items of the sequence (or a list of tuples if more than one sequence).
Type:      builtin_function_or_method

In [176]: def my_square(a):
     ...:     return a * a
     ...: 

In [177]: my_square(2)
Out[177]: 4

In [178]: my_square(25)
Out[178]: 625

In [179]: my_square(23)
Out[179]: 529

In [180]: # when ever i get a return value, the fucntion is called true, else the function is called false.

In [181]: map(my_square,(21,22,23,24,25,26))
Out[181]: [441, 484, 529, 576, 625, 676]

In [182]: # filter

In [183]: filter?
Docstring:
filter(function or None, sequence) -> list, tuple, or string

Return those items of sequence for which function(item) is true.  If
function is None, return the items that are true.  If sequence is a tuple
or string, return the same type, else return a list.
Type:      builtin_function_or_method

In [184]: def my_even(a):
     ...:     if a % 2 == 0:
     ...:         return 'even'
     ...:     

In [185]: my_even(2)
Out[185]: 'even'

In [186]: my_even(3)

In [187]: print my_even(3)
None

In [188]: filter(my_even,range(11,21))
Out[188]: [12, 14, 16, 18, 20]

In [189]: # playing with map and filter

In [190]: map(my_square,(21,22,23,24,25,26))
Out[190]: [441, 484, 529, 576, 625, 676]

In [191]: filter(my_square,(21,22,23,24,25,26))
Out[191]: (21, 22, 23, 24, 25, 26)

In [192]: filter(my_even,range(11,21))
Out[192]: [12, 14, 16, 18, 20]

In [193]: map(my_even,range(11,21))
Out[193]: [None, 'even', None, 'even', None, 'even', None, 'even', None, 'even']

In [194]: # lambda - creating a nameless function on fly..

In [195]: map(lambda a:a*a,(21,22,23,24,25,26))
Out[195]: [441, 484, 529, 576, 625, 676]

In [196]: filter(lamdba a:a%2==0,range(11,21))
  File "<ipython-input-196-cd9636a03abb>", line 1
    filter(lamdba a:a%2==0,range(11,21))
                  ^
SyntaxError: invalid syntax


In [197]: filter(lambda a:a%2==0,range(11,21))
Out[197]: [12, 14, 16, 18, 20]

In [198]: 



